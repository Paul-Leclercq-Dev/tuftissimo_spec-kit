// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum OrderKind {
  PRODUCT
  CUSTOM
}

enum OrderStatus {
  pending
  paid
  failed
  preparing
  shipped
  cancelled
}

enum BackingType {
  ADHESIVE
  NON_ADHESIVE
}

enum MaterialCode {
  COTTON_A
  COTTON_B
  WOOL_A
}

enum SizeCode {
  S
  M
  L
}

model User {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  password     String
  role         String       @default("user")
  name         String?
  orders       Order[]
  contacts     Contact[]
  customOrders CustomOrder[]
  createdAt    DateTime     @default(now())
}

model Product {
  id          Int       @id @default(autoincrement())
  slug        String    @unique
  name        String
  description String?
  priceCents  Int?      // legacy conservé (ex: prix de base catalogue)
  stock       Int?      // legacy conservé
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  orders      Order[]
}

model CustomOrder {
  id               Int          @id @default(autoincrement())

  // Brief / specs (sur-mesure)
  width            Float?
  height           Float?
  colors           String?
  inspirationUrl   String?
  notes            String?
  status           String       @default("new") // 'new' | 'quoted' | 'awaiting_payment' | 'accepted' | 'rejected' | 'converted'

  // Préférences client (log)
  materialCode     MaterialCode?
  sizeCode         SizeCode?
  backing          BackingType?

  // Devis (HT proposé)
  quotedPriceCents Int?

  // Contexte utilisateur (optionnels)
  requesterName    String?
  requesterEmail   String?
  user             User?        @relation(fields: [userId], references: [id])
  userId           Int?

  // L’ordre généré après acceptation (1–1)
  order            Order?

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

/**
 * Order 1-ligne (pas d'OrderItem)
 * priceCents = SUBTOTAL HT (unitPriceHT * quantity)
 * totalCents = priceCents + taxCents + shippingCents
 */
model Order {
  id                Int          @id @default(autoincrement())
  kind              OrderKind
  status            OrderStatus  @default(pending)

  // STANDARD catalogue
  product           Product?     @relation(fields: [productId], references: [id])
  productId         Int?

  // Choix de personnalisation "catalogue" (enums) — stockés pour traçabilité
  material          MaterialCode?
  size              SizeCode?
  backing           BackingType?

  // SUR-MESURE (1–1)
  customOrder       CustomOrder? @relation(fields: [customOrderId], references: [id])
  customOrderId     Int?         @unique

  // Ligne & quantités
  lineLabel         String
  quantity          Int          @default(1)

  // Montants (en CENTIMES)
  priceCents        Int          // SUBTOTAL HT
  taxCents          Int          @default(0)
  shippingCents     Int          @default(0)
  totalCents        Int          // HT+TVA+port
  currency          String       @default("EUR")

  // Client & logistique
  email             String
  address           String?
  country           String?      // "ES" | "FR"

  // Auth (facultatif)
  user              User?        @relation(fields: [userId], references: [id])
  userId            Int?

  // Stripe (facultatif)
  stripeSessionId       String?
  stripePaymentIntentId String?

  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  contacts          Contact[]

  @@index([productId])
  @@index([userId])
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String?
  message   String
  status    String   @default("new")
  createdAt DateTime @default(now())

  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   Int?

  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}
